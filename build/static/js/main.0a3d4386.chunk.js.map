{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","inputText","todos","setTodos","setStatus","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a3d4386.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Form = ({setInputText, inputText, todos, setTodos, setStatus}) => {\n    const inputTextHandler = (e) => {\n        setInputText(e.target.value)\n    };\n    const submitTodoHandler = (e) => {\n        e.preventDefault();\n        setTodos([\n            ...todos, {\n                text: inputText,\n                completed: false,\n                id: Math.random() * 1000\n            }\n        ]);\n        setInputText(\"\");\n    };\n    const statusHandler = (e) => {\n        setStatus(e.target.value);\n    };\n    return (\n        <form>\n            <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\n            <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n                <i className=\"fas fa-plus-square\"></i>\n            </button>\n            <div className=\"select\">\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n                    <option value=\"all\">All</option>\n                    <option value=\"completed\">Completed</option>\n                    <option value=\"uncompleted\">Uncompleted</option>\n                </select>\n            </div>\n        </form>\n    );\n};\n\nexport default Form;","import React from 'react';\n\nconst Todo = ({text, todo, todos, setTodos}) => {\n    //Events\n    const deleteHandler = () => {\n        setTodos(todos.filter((el) => el.id !== todo.id));\n    };\n    const completeHandler = () => {\n        setTodos(todos.map((item) => {\n            if(item.id === todo.id) {\n               return {\n                   ...item,\n                   completed: !item.completed\n               };\n            }\n            return item;\n        } ));\n    };\n    return (\n        <div className=\"todo\">\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\" }`}>{text}</li>\n            <button onClick={completeHandler} className=\"complete-btn\">\n                <i className=\"fas fa-check\"></i>\n            </button>\n            <button onClick={deleteHandler} className=\"trash-btn\">\n                <i className=\"fas fa-trash\"></i>\n            </button>\n        </div>\n    );\n}\nexport default Todo;","import React from 'react';\n//Import Components\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\n//console.log(filteredTodos);\n    return (\n        <div className=\"todo-container\">\n            <ul className=\"todo-list\">\n                {filteredTodos.map((todo) => (\n                    <Todo\n                        setTodos={setTodos}\n                        todos={todos}\n                        key={todo.id}\n                        todo={todo}\n                        text={todo.text} />\n                ))}\n            </ul>\n\n        </div>\n    );\n};\nexport default TodoList;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n//Importing components\nimport Form from './components/Form';\nimport TodoList from './components/TodoList'\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  //RUNS ONCE WHEN THE APPS START\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]);\n\n  //FUNCTIONS\n  const filterHandler = () => {\n    switch (status) {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n  //SAVE TO LOCAL\n\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  };\n\n  const getLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n    let todoLocal =  JSON.parse(localStorage.getItem('todos'));\n    //console.log(todoLocal);\n    setTodos(todoLocal);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1> Tasneem's Todo list </h1>\n      </header>\n      <Form todos={todos}\n        setTodos={setTodos}\n        inputText={inputText}\n        setInputText={setInputText}\n        setStatus={setStatus}\n      />\n      <TodoList filteredTodos={filteredTodos} setTodos={setTodos} todos={todos} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}